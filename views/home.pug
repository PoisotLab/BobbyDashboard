extends master

block contentpane
    div#fulld3

block scripts
    script.
        $(".nav_home").addClass("active")
        // Create a d3 network
        var Fwidth  = $("#fulld3").width(),
            Fheight = $("#fulld3").height()
        d3.select("#fulld3").append("svg").attr("width", Fwidth).attr("height", Fheight)
        var svg = d3.select("svg"),
            width = +svg.attr("width"),
            height = +svg.attr("height")
        var nodes = [], links = [];
        var simulation = d3.forceSimulation(nodes)
            .force("charge", d3.forceManyBody().strength(-200))
            .force("link", d3.forceLink(links).distance(100))
            .force("x", d3.forceX())
            .force("y", d3.forceY())
            .alphaTarget(0)
            .on("tick", ticked);

        var g = svg.append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")"),
            link = g.append("g").attr("stroke", "#000").attr("stroke-width", 1.5).selectAll(".link"),
            node = g.append("g").attr("stroke", "#fff").attr("stroke-width", 1.5).selectAll(".node");

        function ticked() {
            node.attr("cx", function(d) { return d.x; })
                .attr("cy", function(d) { return d.y; })

            link.attr("x1", function(d) { return d.source.x; })
                .attr("y1", function(d) { return d.source.y; })
                .attr("x2", function(d) { return d.target.x; })
                .attr("y2", function(d) { return d.target.y; });
        }
        // Restart
        function restart() {
            // Apply the general update pattern to the nodes.
            node = node.data(nodes, function(d) { return d.id;});
            node.exit().remove();
            node = node.enter()
                .append("circle")
                .attr("fill", "#c4e")
                .attr("r", 8)
                .attr("img", function(d){if(d.type == "user"){return d.icon} else {return 'none'}})
                .attr("class", function(d){return(d.type)})
                .merge(node);

            // Apply the general update pattern to the links.
            link = link.data(links, function(d) { return d.source.id + "-" + d.target.id; });
            link.exit().remove();
            link = link.enter().append("line").merge(link);

            // Update and restart the simulation.
            simulation.nodes(nodes);
            simulation.force("link").links(links);
            simulation.alpha(1).restart();
        }
        // Add the pins for each observation
        function getObsPaged(page) {
            $.ajax({
                type: 'GET',
                url: '/obs/' + page,
                success: function(data) {
                    for (var i = 0; i < data.length; i++) {
                        var obs = data[i];
                        var tax = {id: "tax_" + String(obs.taxon_id), type: "taxa"},
                            usr = {id: "usr_" + String(obs.user_id), type: "user", icon: obs.user.user_icon_url}
                        var taxIndex = 0, usrIndex = 0
                        // Check if the taxon, etc exists
                        if ( _.where(nodes, tax).length == 0 ) {
                            nodes.push(tax)
                        }
                        taxIndex = _.indexOf(nodes, _.where(nodes, tax)[0])

                        if ( _.where(nodes, usr).length == 0 ) {
                            nodes.push(usr)
                        }
                        usrIndex = _.indexOf(nodes, _.where(nodes, usr)[0])

                        var lnk = {source: nodes[usrIndex], target: nodes[taxIndex]}
                        if ( _.where(links, lnk).length == 0 ) {
                            links.push(lnk)
                            restart()
                        }
                    }
                    //-restart()
                    // This pages through the data every time the page is loaded
                    // which will need to be optimized
                    if(data.length > 0) {
                        getObsPaged(page+1)
                    }
                }
            })
        }
        getObsPaged(1)

